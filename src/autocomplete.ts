/* eslint-disable no-unused-vars */
import * as vscode from 'vscode'

const TYPES: string[] = ['json', 'plaintext', 'jq']

// Javascript keywords array taken from https://github.com/remy/jace/blob/master/public/jq-mode.js

const keywords = [
  'IN',
  'INDEX',
  'JOIN',
  'acos',
  'acosh',
  'add',
  'all',
  'any',
  'arrays',
  'ascii_downcase',
  'ascii_upcase',
  'asin',
  'asinh',
  'atan',
  'atan2',
  'atanh',
  'booleans',
  'bsearch',
  'builtins',
  'capture',
  'cbrt',
  'ceil',
  'combinations',
  'contains',
  'copysign',
  'cos',
  'cosh',
  'debug',
  'del',
  'delpaths',
  'drem',
  'empty',
  'endswith',
  'env',
  'erf',
  'erfc',
  'error',
  'exp',
  'exp10',
  'exp2',
  'explode',
  'expm1',
  'fabs',
  'fdim',
  'finites',
  'first',
  'flatten',
  'floor',
  'fma',
  'fmax',
  'fmin',
  'fmod',
  'format',
  'frexp',
  'from_entries',
  'fromdate',
  'fromdateiso8601',
  'fromjson',
  'fromstream',
  'gamma',
  'get_jq_origin',
  'get_prog_origin',
  'get_search_list',
  'getpath',
  'gmtime',
  'group_by',
  'gsub',
  'halt',
  'halt_error',
  'has',
  'hypot',
  'implode',
  'in',
  'index',
  'indices',
  'infinite',
  'input',
  'input_filename',
  'input_line_number',
  'inputs',
  'inside',
  'isempty',
  'isfinite',
  'isinfinite',
  'isnan',
  'isnormal',
  'iterables',
  'j0',
  'j1',
  'jn',
  'join',
  'keys',
  'keys_unsorted',
  'last',
  'ldexp',
  'leaf_paths',
  'length',
  'lgamma',
  'lgamma_r',
  'limit',
  'localtime',
  'log',
  'log10',
  'log1p',
  'log2',
  'logb',
  'ltrimstr',
  'map',
  'map_values',
  'match',
  'max',
  'max_by',
  'min',
  'min_by',
  'mktime',
  'modf',
  'modulemeta',
  'nan',
  'nearbyint',
  'nextafter',
  'nexttoward',
  'normals',
  'not',
  'now',
  'nth',
  'nulls',
  'numbers',
  'objects',
  'path',
  'paths',
  'pow',
  'pow10',
  'range',
  'recurse',
  'recurse_down',
  'remainder',
  'repeat',
  'reverse',
  'rindex',
  'rint',
  'round',
  'rtrimstr',
  'scalars',
  'scalars_or_empty',
  'scalb',
  'scalbln',
  'scan',
  'select',
  'setpath',
  'significand',
  'sin',
  'sinh',
  'sort',
  'sort_by',
  'split',
  'splits',
  'sqrt',
  'startswith',
  'stderr',
  'strflocaltime',
  'strftime',
  'strings',
  'strptime',
  'sub',
  'tan',
  'tanh',
  'test',
  'tgamma',
  'to_entries',
  'todate',
  'todateiso8601',
  'tojson',
  'tonumber',
  'tostream',
  'tostring',
  'transpose',
  'trunc',
  'truncate_stream',
  'type',
  'unique',
  'unique_by',
  'until',
  'utf8bytelength',
  'values',
  'walk',
  'while',
  'with_entries',
  'y0',
  'y1',
  'yn',
].concat(['if', 'then', 'else', 'elif', 'end'])

export class WorkspaceFilesCompletionItemProvider
  implements vscode.CompletionItemProvider {
  public async provideCompletionItems(
    document: vscode.TextDocument,
    position: vscode.Position,
    token: vscode.CancellationToken,
  ): Promise<vscode.CompletionItem[]> {
    const completionItems: vscode.CompletionItem[] = vscode.workspace.textDocuments
      .map((doc) => {
        if (TYPES.includes(doc.languageId)) {
          return new vscode.CompletionItem(
            doc.fileName,
            vscode.CompletionItemKind.File,
          )
        }
        return undefined
      })
      .filter((item) => item)

    return completionItems
  }
}

export class TestCompletionItemProvider
  implements vscode.CompletionItemProvider {
  public provideCompletionItems(
    document: vscode.TextDocument,
    position: vscode.Position,
    token: vscode.CancellationToken,
  ): Thenable<vscode.CompletionList> {
    let prefixRange = document.getWordRangeAtPosition(position)
    if (prefixRange == null) {
      return Promise.resolve(new vscode.CompletionList([], true))
    }
    let prefix = document.getText(prefixRange)

    return new Promise<vscode.CompletionList>((resolve, reject) => {
      resolve(
        new vscode.CompletionList(
          keywords.map(
            (keyword) =>
              new vscode.CompletionItem(
                keyword,
                vscode.CompletionItemKind.Function,
              ),
          ),
          true,
        ),
      )
    })
  }
}
